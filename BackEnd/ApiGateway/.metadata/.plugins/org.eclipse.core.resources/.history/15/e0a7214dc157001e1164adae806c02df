package com.apiGateway.exception;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.web.error.ErrorAttributeOptions;
import org.springframework.boot.web.reactive.error.DefaultErrorAttributes;
import org.springframework.core.annotation.MergedAnnotation;
import org.springframework.core.annotation.MergedAnnotations;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.validation.FieldError;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.reactive.function.server.ServerRequest;
import org.springframework.web.reactive.result.method.annotation.ResponseEntityExceptionHandler;

@Component
public class GlobalExceptionHandler extends DefaultErrorAttributes{

	private Logger logger=LoggerFactory.getLogger(GlobalExceptionHandler.class);
	
	@ExceptionHandler(Exception.class)
	public ResponseEntity<ErrorDetailsForException> handleGlobalException(Exception exception,WebRequest webRequest)
	{
		ErrorDetailsForException errorDetailsForException =new ErrorDetailsForException();
		errorDetailsForException.setErrorCode(HttpStatus.INTERNAL_SERVER_ERROR.name());
		errorDetailsForException.setMessage(exception.getMessage());
		errorDetailsForException.setPath(webRequest.getDescription(false));
		errorDetailsForException.setTimestamp(LocalDateTime.now());
		logger.info(errorDetailsForException.toString());
		return new ResponseEntity<>(errorDetailsForException,HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	@Override
	public Map<String, Object> getErrorAttributes(ServerRequest request, ErrorAttributeOptions options) {
		// TODO Auto-generated method stub
		
        Throwable error = this.getError(request);
        logger.error("Error occured", error);
        Map<String, Object> map = super.getErrorAttributes(request, options);
        String errorCode = HttpStatus.INTERNAL_SERVER_ERROR.name();
        map.remove("error");
        map.remove("requestId");
        map.remove("trace");
        map.put("errorCode", errorCode);
        
        return map;

	}
}
