package com.apiGateway.filter;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Component;

import com.apiGateway.exception.UnauthorizedAccessException;
import com.apiGateway.utils.JwtHelper;

@Component
public class AuthorizationFilter extends AbstractGatewayFilterFactory<AuthorizationFilter>{

	private Logger logger=LoggerFactory.getLogger(AuthorizationFilter.class);
	
	@Autowired
	JwtHelper jwtHelper;
	
	@Autowired
	RouteValidator routeValidator;
	
	@Override
	public GatewayFilter apply(AuthorizationFilter config) {
		// TODO Auto-generated method stub
		return ((exchange, chain) -> {
			logger.info("check role: {}", routeValidator.isSecuredHR.test(exchange.getRequest()));
			if (routeValidator.isSecuredHR.test(exchange.getRequest())) {
				String token = exchange.getRequest().getHeaders().get(HttpHeaders.AUTHORIZATION).get(0).substring(7);

				if (!"ROLE_HR".equals(jwtHelper.getRole(token))) {
					throw new UnauthorizedAccessException("Unauthorized access to application");
				}
			}
			return chain.filter(exchange);
		});

	}

}
