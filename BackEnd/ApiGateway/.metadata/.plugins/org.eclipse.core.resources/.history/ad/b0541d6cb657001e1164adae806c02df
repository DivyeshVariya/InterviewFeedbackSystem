package com.apiGateway.exception;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.reactive.result.method.annotation.ResponseEntityExceptionHandler;
import org.springframework.web.server.MethodNotAllowedException;
import org.springframework.web.server.ServerWebExchange;

import reactor.core.publisher.Mono;

@ControllerAdvice
public class GlobalExceptionHandler extends ResponseEntityExceptionHandler{

	private Logger logger=LoggerFactory.getLogger(GlobalExceptionHandler.class);
	

	@ExceptionHandler(AuthorizationHeaderMissingException.class)
	public ResponseEntity<ErrorDetailsForException> handleGlobalException(AuthorizationHeaderMissingException exception,WebRequest webRequest)
	{
		ErrorDetailsForException errorDetailsForException =new ErrorDetailsForException();
		errorDetailsForException.setErrorCode("MISSING_HEADER");
		errorDetailsForException.setMessage(exception.getMessage());
		errorDetailsForException.setPath(webRequest.getDescription(false));
		errorDetailsForException.setTimestamp(LocalDateTime.now());
		logger.info(errorDetailsForException.toString());
		return new ResponseEntity<>(errorDetailsForException,HttpStatus.INTERNAL_SERVER_ERROR);
	}
	

	@ExceptionHandler(UnKnownURLException.class)
	public ResponseEntity<ErrorDetailsForException> handleGlobalException(UnKnownURLException exception,WebRequest webRequest)
	{
		ErrorDetailsForException errorDetailsForException =new ErrorDetailsForException();
		errorDetailsForException.setErrorCode("UNKONWN_URL");
		errorDetailsForException.setMessage(exception.getMessage());
		errorDetailsForException.setPath(webRequest.getDescription(false));
		errorDetailsForException.setTimestamp(LocalDateTime.now());
		logger.info(errorDetailsForException.toString());
		return new ResponseEntity<>(errorDetailsForException,HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	@ExceptionHandler(Exception.class)
	public ResponseEntity<ErrorDetailsForException> handleGlobalException(Exception exception,WebRequest webRequest)
	{
		ErrorDetailsForException errorDetailsForException =new ErrorDetailsForException();
		errorDetailsForException.setErrorCode(HttpStatus.INTERNAL_SERVER_ERROR.name());
		errorDetailsForException.setMessage(exception.getMessage());
		errorDetailsForException.setPath(webRequest.getDescription(false));
		errorDetailsForException.setTimestamp(LocalDateTime.now());
		logger.info(errorDetailsForException.toString());
		return new ResponseEntity<>(errorDetailsForException,HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	@Override
	protected Mono<ResponseEntity<Object>> handleMethodNotAllowedException(MethodNotAllowedException ex,
			HttpHeaders headers, HttpStatusCode status, ServerWebExchange exchange) {
		// TODO Auto-generated method stub
		Map<String, String> errors = new HashMap<>();
    	List<ObjectError> errorList = ex.getBindingResult().getAllErrors();
    	
    	errorList.forEach(err->{
    		String fieldName = ((FieldError) err).getField();
    		String message = err.getDefaultMessage();
    		errors.put(fieldName, message);    		
    	});
    	
    	return ResponseEntity.badRequest().body(errors);
	}
}
