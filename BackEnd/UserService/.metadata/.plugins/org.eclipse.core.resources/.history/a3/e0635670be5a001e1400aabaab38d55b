package com.userService.serviceImpl;

import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import com.userService.dto.ChangePasswordRequestDto;
import com.userService.dto.ForgetPasswordResponseDto;
import com.userService.dto.ResponseDto;
import com.userService.dto.SendMailRequestDto;
import com.userService.dto.UserDetailsResponseDto;
import com.userService.dto.UserUpdateProfileRequestDto;
import com.userService.exception.PasswordMisMatchException;
import com.userService.exception.UserDetailsNotFoundException;
import com.userService.exception.UserNotFoundException;
import com.userService.mapper.AutoUserMapper;
import com.userService.model.Users;
import com.userService.repository.UserManagerRepository;
import com.userService.service.UserManagerService;

@Service
@RefreshScope
public class UserManagerServiceImpl implements UserManagerService{

	@Autowired
	UserManagerRepository userManagerRepository;
	
	@Autowired
	PasswordEncoder passwordEncoder;
	
	@Autowired
	WebClient webclient;
	
	private Logger logger =LoggerFactory.getLogger(UserManagerServiceImpl.class);
	
	@Override
	public UserDetailsResponseDto getUserdetails(String userEmailId) {
		// TODO Auto-generated method stub
		Optional<Users> userInfoFromDB=userManagerRepository.findByUserEmailId(userEmailId);
		if(userInfoFromDB.isEmpty())
		{
			throw new UserDetailsNotFoundException("User details not found...!!");
		}
		logger.info("From GetUserdetails method :"+userEmailId);
		return AutoUserMapper.MAPPER.mapToUserDetailsResponseDeto(userInfoFromDB.get());
	}

	@Override
	public ResponseDto changePassword(ChangePasswordRequestDto changePasswordDto) {
		// TODO Auto-generated method stub
		Optional<Users> userInfoFromDB=userManagerRepository.findByUserEmailId(changePasswordDto.getUserEmailId());
		if(userInfoFromDB.isEmpty())
		{
			throw new UserDetailsNotFoundException("User details not found...!!");
		}
		logger.info("From GetUserdetails method :"+userInfoFromDB);
		ResponseDto responseDto=new ResponseDto();
		if(changePasswordDto.getNewPassword().equals(changePasswordDto.getConfirmedPassword()))
		{
			userInfoFromDB.get().setUserPassword(passwordEncoder.encode(changePasswordDto.getNewPassword()));
			userManagerRepository.save(userInfoFromDB.get());
			responseDto.setResponseCode(HttpStatus.OK.value());
			responseDto.setResponseMessage("Password Changed successfully...");
			return responseDto;
		}
		else
		{
			throw new PasswordMisMatchException("New password and Confirmed password must be same !!!");
		}
	}

	@Override
	public ForgetPasswordResponseDto forgetPassword(String userEmailId,String token) {
		// TODO Auto-generated method stub
		SendMailRequestDto sendMailRequestDto=new SendMailRequestDto();
		sendMailRequestDto.setMailFor("Forget_Password");
		sendMailRequestDto.setMailTo(userEmailId);
		logger.info(token);
		ForgetPasswordResponseDto response=webclient.post()
				.uri("http://localhost:8082/emailManager/send-mail")
				.header(HttpHeaders.AUTHORIZATION, token)
				.contentType(MediaType.APPLICATION_JSON)
				.accept(MediaType.APPLICATION_JSON)
				.bodyValue(sendMailRequestDto)
				.retrieve()
				.bodyToMono(ForgetPasswordResponseDto.class)
				.block();
		logger.info(response.toString());
		Optional<Users> savedUserFromDB=userManagerRepository.findByUserEmailId(userEmailId);
		logger.info(savedUserFromDB.get().toString()+" fetch from db");
		if(savedUserFromDB.isEmpty())
		{
			throw new UserNotFoundException("User not found from db !! ");
		}
		else
		{
			savedUserFromDB.get().setUserPassword(passwordEncoder.encode(response.getNewPassword()));
			logger.info(savedUserFromDB.get().toString()+" updated data ");
			userManagerRepository.save(savedUserFromDB.get());
			logger.info("forget password successfully !!!");
			return response;
		}
	}

	@Override
	public ResponseDto updateProfile(UserUpdateProfileRequestDto userUpdateProfileRequestDto) {
		// TODO Auto-generated method stub
		logger.info(userUpdateProfileRequestDto.toString());
		Optional<Users> savedUserFromDB=userManagerRepository.findByUserEmailId(userUpdateProfileRequestDto.getUserEmailId());
		logger.info(savedUserFromDB.toString());
		if(savedUserFromDB.isEmpty())
		{
			throw new UserNotFoundException("User not found !!!");
		}
		else
		{
			Users updatedDocument=savedUserFromDB.get();
			logger.info(updatedDocument.toString());
			updatedDocument.setUserEmailId(userUpdateProfileRequestDto.getUserEmailId());
			updatedDocument.setUserDesignation(userUpdateProfileRequestDto.getUserDesignation());
			updatedDocument.setUserDepartment(userUpdateProfileRequestDto.getUserDepartment());
			updatedDocument.setUserFullName(userUpdateProfileRequestDto.getUserFullName());
			updatedDocument.setUserContactNo(userUpdateProfileRequestDto.getUserContactNo());
			logger.info(updatedDocument.toString());
			userManagerRepository.save(updatedDocument);
			logger.info("user updated successfully !!!");
			ResponseDto responseDto=new ResponseDto();
			responseDto.setResponseCode(HttpStatus.OK.value());
			responseDto.setResponseMessage("User updated successfully !!!");
			return responseDto;
		}
	
	}

	@Override
	public ResponseDto deleteUser(String userEmailId) {
		// TODO Auto-generated method stub
		Optional<Users> savedUserFromDB=userManagerRepository.findByUserEmailId(userEmailId);
		if(savedUserFromDB.isEmpty())
		{
			throw new UserNotFoundException("User not found !!!");
		}
		else
		{
			userManagerRepository.deleteByUserEmailId(userEmailId);
			logger.info("user deleted successfully !!!");
			ResponseDto responseDto=new ResponseDto();
			responseDto.setResponseCode(HttpStatus.OK.value());
			responseDto.setResponseMessage("User deleted successfully !!!");
			return responseDto;
		}
	}

}
